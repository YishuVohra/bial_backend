"""
Django settings for django_k8s project.

Generated by 'django-admin startproject' using Django 3.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path
from dotenv import dotenv_values
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
print("BASE_DIR", BASE_DIR)

myvars=dotenv_values('/app/.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/


# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = str(os.environ.get('DEBUG')) == "1"
# DEBUG = True
DEBUG = False
# ENV_ALLOWED_HOST = os.environ.get("ENV_ALLOWED_HOST")
# ALLOWED_HOSTS = []
# if ENV_ALLOWED_HOST:
#     ALLOWED_HOSTS = [ ENV_ALLOWED_HOST ]
ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django_crontab',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    # 'rest_framework.authtoken',
    'common',
    'user',
    'employee',
    'team',
    "shift",
    # "profiles",
    # "banking",
    # "loan",
    # "account", 
    # "personal_loan",
    # "bod_eod",
    # "customer_module",
    # "bank_lead_mapping",
    # "customerapp_management"
    # "authentication",
    # "corsheaders",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    "common.middleware.HandleCustomExceptionMiddleware"
]

ROOT_URLCONF = 'django_k8s.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'user.backends.JWTAuthentication',
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
        # 'rest_framework.authentication.TokenAuthentication'
    ],
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
    ),
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    # 'PAGE_SIZE': 10
}

# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': [
#         'common.backends.CustomJWTAuthentication',
#         # 'rest_framework_simplejwt.authentication.JWTAuthentication',
#         # 'rest_framework.authentication.TokenAuthentication'
#     ],
#     'DEFAULT_PERMISSION_CLASSES': (
#         'rest_framework.permissions.AllowAny',
#     ),
#     # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
#     # 'PAGE_SIZE': 10
# }

CORS_ORIGIN_ALLOW_ALL = True

WSGI_APPLICATION = 'django_k8s.wsgi.application'

try:
    from .local_settings import *
except Exception as e:
    print(e)
    print('Local Settings file not found')
    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")
    # Database
    # https://docs.djangoproject.com/en/3.2/ref/settings/#databases

    # DATABASES = {
    #         "default": {
    #             "ENGINE": "django.db.backends.postgresql",
    #             "NAME": 'defaultdb',
    #             "USER": 'doadmin',
    #             "PASSWORD": 'AVNS_XsoM-MTsvINDikW',
    #             "HOST": 'db-postgresql-blr1-72618-do-user-11027748-0.b.db.ondigitalocean.com',
    #             "PORT": 25060,
    #         }
    #     }
    # DATABASES["default"]["OPTIONS"] = {
    # "sslmode": "require"
    # }

    # DB_USERNAME = os.environ.get("POSTGRES_USER")
    # DB_PASSWORD = os.environ.get("POSTGRES_PASSWORD")
    # DB_DATABASE = os.environ.get("POSTGRES_DB")
    # DB_HOST = os.environ.get("POSTGRES_HOST")
    # DB_PORT = os.environ.get("POSTGRES_PORT")
    DB_USERNAME = os.environ.get("POSTGRES_USER") or myvars['POSTGRES_USER'] 
    DB_PASSWORD = os.environ.get("POSTGRES_PASSWORD") or myvars['POSTGRES_PASSWORD'] 
    DB_DATABASE = os.environ.get("POSTGRES_DB") or myvars['POSTGRES_DB'] 
    DB_HOST = os.environ.get("POSTGRES_HOST") or myvars['POSTGRES_HOST'] 
    DB_PORT = os.environ.get("POSTGRES_PORT") or myvars['POSTGRES_PORT']
    DB_IS_AVAIL = all([
        DB_USERNAME,
        DB_PASSWORD,
        DB_DATABASE,
        DB_HOST,
        DB_PORT
    ])
    DB_IGNORE_SSL=os.environ.get("DB_IGNORE_SSL") == "true"

    if DB_IS_AVAIL:
        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.postgresql",
                "NAME": DB_DATABASE,
                "USER": DB_USERNAME,
                "PASSWORD": DB_PASSWORD,
                "HOST": DB_HOST,
                "PORT": DB_PORT,
            }
        }
        if not DB_IGNORE_SSL:
             DATABASES["default"]["OPTIONS"] = {
                "sslmode": "require"
             }

SECRET_KEY = ')532j8(0+oqe0frsht1_69%ke4pnw4(@33f*uuj9d3le$p#9%c'

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATIC_ROOT = BASE_DIR / "staticfiles-cdn"

STATICFILES_DIRS = [
    BASE_DIR / "staticfiles"
]

MEDIA_ROOT = BASE_DIR / 'media'

from .cdn.conf import * # noqa
AUTH_USER_MODEL = 'user.User'

if DEBUG:
    INSTALLED_APPS.append("django_extensions")  

# Refer: https://simpleisbetterthancomplex.com/tutorial/2018/12/19/how-to-use-jwt-authentication-with-django-rest-framework.html
# for jwt authentication


OTP_EXPIRY_IN_SECS = 180

# One Signal Key
ONE_SIGNAL_APP_ID = "48af43e0-88ae-4b2e-bc78-72943872b6b8"
ONE_SIGNAL_API_KEY = "MmZlZjJkNDctMTZkNy00YTViLWJmZTQtMzUxY2FhMmY3ODdj"

MINIMUM_SUPPORTED_BUILD_NUMBER = 50
LATEST_BUILD_NUMBER = '50'


# MAILGUN
# EMAIL_BACKEND = 'django_mailgun_mime.backends.MailgunMIMEBackend'
# MAILGUN_API_KEY= "cd9b219f8bfbe58d402ac92eb68d5c4b-d117dd33-7e4abd8e"
# MAILGUN_DOMAIN_NAME = "sandbox2a22c232eaa746a9a5790c14285bba0c.mailgun.org"
# EMAIL_PORT = 587


# CRONJOBS = [
#     ('*/2 * * * *', 'bank_lead_mapping.cron.my_cron_job'),
#     ('*/2 * * * *', 'lead.cron.my_cron_job'),
#     ('*/2 * * * *', 'customerapp_management.cron.my_cron_job'),
#     ('30 2 * * *', 'bank_lead_mapping.appointment_cron.my_cron_job')
# ]